{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/App.js\";\nimport React, { useState, useEffect, createRef, useRef } from \"react\";\nimport '../styles/app.css';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001');\n\nconst App = props => {\n  // Create a state for the input element's values\n  // Create a state containing the message history \n  const [inputValue, setInputValue] = useState('');\n  const [messageHistory, setMessageHistory] = useState([]); // Create a reference for the input and submit button elements \n\n  const inputMessage = useRef(null);\n  const submitButton = useRef(null); // Upon mounting, check for message received from the server\n\n  useEffect(() => {\n    socket.on('message', messageObject => {\n      onMessageReceived(messageObject);\n    });\n  }); // SOCKET FUNCTIONS\n\n  function onMessageReceived(messageObject) {\n    updateMessageHistory(messageObject);\n  }\n\n  function updateMessageHistory(messageObject) {\n    // Add message object containing the text, creation date, and username of sender\n    setMessageHistory([...messageHistory, messageObject]);\n  }\n\n  function sendMessage(message) {\n    socket.emit('newMessage', message, error => {\n      submitButton.current.removeAttribute('disabled');\n\n      if (error) {\n        return console.log(error);\n      }\n\n      console.log('The message was delivered');\n      inputMessage.current.value = '';\n      inputMessage.current.focus();\n    });\n  } // FORM\n\n\n  function onInputChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    submitButton.current.setAttribute('disabled', 'disabled');\n    sendMessage(inputValue);\n  }\n\n  function renderChatBox() {\n    return messageHistory.map((message, index = 0) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"message\",\n        key: index++,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        class: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }\n      }, message.username), /*#__PURE__*/React.createElement(\"span\", {\n        class: \"message__meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }, message.createdAt)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }, message.text));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"chat__messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, renderChatBox()), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"chatBox\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputMessage,\n    value: inputValue,\n    onChange: onInputChange,\n    id: \"inputChat\",\n    name: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    ref: submitButton,\n    id: \"submit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/App.js"],"names":["React","useState","useEffect","createRef","useRef","io","socket","App","props","inputValue","setInputValue","messageHistory","setMessageHistory","inputMessage","submitButton","on","messageObject","onMessageReceived","updateMessageHistory","sendMessage","message","emit","error","current","removeAttribute","console","log","value","focus","onInputChange","e","target","handleSubmit","preventDefault","setAttribute","renderChatBox","map","index","username","createdAt","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createRef, useRef } from \"react\";\nimport '../styles/app.css';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001');\n\nconst App = (props) => {\n    // Create a state for the input element's values\n    // Create a state containing the message history \n    const [inputValue, setInputValue] = useState('')\n    const [messageHistory, setMessageHistory] = useState([])\n\n    // Create a reference for the input and submit button elements \n    const inputMessage = useRef(null)\n    const submitButton = useRef(null)\n\n    // Upon mounting, check for message received from the server\n    useEffect(() => {\n        socket.on('message', (messageObject) => {\n            onMessageReceived(messageObject)\n        })\n    })\n\n    // SOCKET FUNCTIONS\n    function onMessageReceived(messageObject) {\n        updateMessageHistory(messageObject)\n    }\n\n    function updateMessageHistory(messageObject) {\n        // Add message object containing the text, creation date, and username of sender\n        setMessageHistory([...messageHistory, messageObject])\n    }\n\n    function sendMessage(message) {\n        socket.emit('newMessage', message, (error) => {\n            submitButton.current.removeAttribute('disabled')\n            if (error) {\n                return console.log(error)\n            }\n            console.log('The message was delivered')\n            inputMessage.current.value = ''\n            inputMessage.current.focus()\n        })\n    }\n\n    // FORM\n    function onInputChange(e) {\n        setInputValue(e.target.value)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        submitButton.current.setAttribute('disabled', 'disabled')\n        sendMessage(inputValue)\n    }\n\n    function renderChatBox() {\n        return messageHistory.map((message, index = 0) => {\n            return (\n                <div class=\"message\" key={index++}>\n                    <p>\n                        <span class=\"message__name\">{message.username}</span>\n                        <span class=\"message__meta\">{message.createdAt}</span>\n                    </p>\n                    <p>{message.text}</p>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <>\n            <ul id=\"chat__messages\">{renderChatBox()}</ul>\n            <form id=\"chatBox\" onSubmit={handleSubmit}>\n                <input ref={inputMessage} value={inputValue} onChange={onInputChange} id=\"inputChat\" name=\"message\" />\n                <button ref={submitButton} id=\"submit\" type=\"submit\">Submit</button>\n            </form>\n        </>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}