{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatComponents/ChatBox.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Moment from 'react-moment';\nimport socket from '../socket';\nimport UserContext from '../userContext';\n\nconst ChatBox = props => {\n  // Create a state for the input element's values\n  const [inputValue, setInputValue] = useState(''); // Create a state containing the message history\n\n  const [messageHistory, setMessageHistory] = useState([]); // Create a state containing initial values for displaying the chatbox\n\n  const [chatDisplay, setChatDisplay] = useState(false); // Get userContext for user details\n\n  const user = useContext(UserContext); // Create a reference for the input and submit button elements\n\n  const chatMessages = useRef(null);\n  const lastMessage = useRef(null);\n  const inputMessage = useRef(null);\n  const submitButton = useRef(null); // autoScroll function to bring chat box to the last message\n\n  function autoscroll() {\n    // Last message element\n    console.log(lastMessage); // Height of new message\n\n    const newMessageStyles = window.getComputedStyle(lastMessage);\n    const newMessageMargin = parseInt(newMessageStyles.marginBottom);\n    const newMessageHeight = lastMessage.offsetHeight + newMessageMargin; // Visible height\n\n    const visibleHeight = chatMessages.offsetHeight; // Height of messages container\n\n    const containerHeight = chatMessages.scrollHeight; // Get how far the user has scrolled\n\n    const scrollOffset = chatMessages.scrollTop + visibleHeight; // Check if at the bottom before the new message\n\n    if (containerHeight - newMessageHeight <= scrollOffset) {\n      chatMessages.scrollTop = chatMessages.scrollHeight;\n    } // TODO: Add button that there is a new message if the user is not at the bottom\n\n  } // Upon mounting, check for message received from the server and join the specified room\n\n\n  useEffect(() => {\n    socket.on('message', messageObject => {\n      updateMessageHistory(messageObject);\n    });\n  }); // SOCKET FUNCTIONS\n\n  function updateMessageHistory(messageObject) {\n    // Add message object containing the text, creation date, and username of sender\n    setMessageHistory([...messageHistory, messageObject]);\n  } // Use the socket emit\n\n\n  function sendMessage(message) {\n    socket.emit('newMessage', message, error => {\n      submitButton.current.removeAttribute('disabled');\n\n      if (error) {\n        return console.log(error);\n      }\n\n      console.log('The message was delivered');\n      inputMessage.current.value = '';\n      setInputValue('');\n      inputMessage.current.focus();\n    });\n  } // FORM\n\n\n  function onInputChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    submitButton.current.setAttribute('disabled', 'disabled');\n    sendMessage(inputValue);\n  } // Show chat messages\n\n\n  function renderChat({\n    username\n  }) {\n    return messageHistory.map((message, index = 0) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: username.toLowerCase() === message.username ? 'message message__user' : 'message',\n        key: index++,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      }, message.username), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"message__meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Moment, {\n        date: message.createdAt,\n        format: \"h:mm a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"message__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, message.text));\n    });\n  } // Toggle chat visibility\n\n\n  const toggleShowHide = () => {\n    setChatDisplay(!chatDisplay);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: chatDisplay ? 'chat__main chat__main-expand' : 'chat__main',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: chatDisplay ? 'chatdisplay__button switch right' : 'chatdisplay__button switch',\n    onClick: toggleShowHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: chatMessages,\n    className: chatDisplay ? 'chat__messages chat__messages-expand' : 'chat__messages',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, renderChat(user)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"compose\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: chatDisplay ? 'message__input message__input-expand' : 'message__input',\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputMessage,\n    value: inputValue,\n    onChange: onInputChange,\n    onClick: !chatDisplay ? toggleShowHide : null,\n    className: \"input\",\n    name: \"message\",\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: chatDisplay ? 'send__button send__button-expand' : 'send__button',\n    ref: submitButton,\n    id: \"submit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-paper-plane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatComponents/ChatBox.js"],"names":["React","useState","useContext","useEffect","useRef","Moment","socket","UserContext","ChatBox","props","inputValue","setInputValue","messageHistory","setMessageHistory","chatDisplay","setChatDisplay","user","chatMessages","lastMessage","inputMessage","submitButton","autoscroll","console","log","newMessageStyles","window","getComputedStyle","newMessageMargin","parseInt","marginBottom","newMessageHeight","offsetHeight","visibleHeight","containerHeight","scrollHeight","scrollOffset","scrollTop","on","messageObject","updateMessageHistory","sendMessage","message","emit","error","current","removeAttribute","value","focus","onInputChange","e","target","handleSubmit","preventDefault","setAttribute","renderChat","username","map","index","toLowerCase","createdAt","text","toggleShowHide"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\nimport Moment from 'react-moment';\n\nimport socket from '../socket';\nimport UserContext from '../userContext';\n\nconst ChatBox = (props) => {\n    // Create a state for the input element's values\n    const [inputValue, setInputValue] = useState('');\n    // Create a state containing the message history\n    const [messageHistory, setMessageHistory] = useState([]);\n    // Create a state containing initial values for displaying the chatbox\n    const [chatDisplay, setChatDisplay] = useState(false);\n\n    // Get userContext for user details\n    const user = useContext(UserContext);\n\n    // Create a reference for the input and submit button elements\n    const chatMessages = useRef(null);\n    const lastMessage = useRef(null);\n    const inputMessage = useRef(null);\n    const submitButton = useRef(null);\n\n    // autoScroll function to bring chat box to the last message\n    function autoscroll() {\n        // Last message element\n        console.log(lastMessage);\n\n        // Height of new message\n        const newMessageStyles = window.getComputedStyle(lastMessage);\n        const newMessageMargin = parseInt(newMessageStyles.marginBottom);\n        const newMessageHeight = lastMessage.offsetHeight + newMessageMargin;\n\n        // Visible height\n        const visibleHeight = chatMessages.offsetHeight;\n\n        // Height of messages container\n        const containerHeight = chatMessages.scrollHeight;\n\n        // Get how far the user has scrolled\n        const scrollOffset = chatMessages.scrollTop + visibleHeight;\n\n        // Check if at the bottom before the new message\n        if (containerHeight - newMessageHeight <= scrollOffset) {\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n        // TODO: Add button that there is a new message if the user is not at the bottom\n    }\n\n    // Upon mounting, check for message received from the server and join the specified room\n    useEffect(() => {\n        socket.on('message', (messageObject) => {\n            updateMessageHistory(messageObject);\n        });\n    });\n\n    // SOCKET FUNCTIONS\n\n    function updateMessageHistory(messageObject) {\n        // Add message object containing the text, creation date, and username of sender\n        setMessageHistory([...messageHistory, messageObject]);\n    }\n\n    // Use the socket emit\n    function sendMessage(message) {\n        socket.emit('newMessage', message, (error) => {\n            submitButton.current.removeAttribute('disabled');\n            if (error) {\n                return console.log(error);\n            }\n            console.log('The message was delivered');\n            inputMessage.current.value = '';\n            setInputValue('');\n            inputMessage.current.focus();\n        });\n    }\n\n    // FORM\n    function onInputChange(e) {\n        setInputValue(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        submitButton.current.setAttribute('disabled', 'disabled');\n        sendMessage(inputValue);\n    }\n\n    // Show chat messages\n    function renderChat({ username }) {\n        return messageHistory.map((message, index = 0) => {\n            return (\n                <div\n                    className={\n                        username.toLowerCase() === message.username\n                            ? 'message message__user'\n                            : 'message'\n                    }\n                    key={index++}\n                >\n                    <p>\n                        <span className=\"message__name\">\n                            {message.username}\n                        </span>\n                        <span className=\"message__meta\">\n                            {\n                                <Moment\n                                    date={message.createdAt}\n                                    format=\"h:mm a\"\n                                />\n                            }\n                        </span>\n                    </p>\n                    <p className=\"message__content\">{message.text}</p>\n                </div>\n            );\n        });\n    }\n\n    // Toggle chat visibility\n    const toggleShowHide = () => {\n        setChatDisplay(!chatDisplay);\n    };\n\n    return (\n        <>\n            <div\n                className={\n                    chatDisplay ? 'chat__main chat__main-expand' : 'chat__main'\n                }\n            >\n                <div\n                    className={\n                        chatDisplay\n                            ? 'chatdisplay__button switch right'\n                            : 'chatdisplay__button switch'\n                    }\n                    onClick={toggleShowHide}\n                >\n                    <div className=\"arrow\"></div>\n                </div>\n                <div\n                    ref={chatMessages}\n                    className={\n                        chatDisplay\n                            ? 'chat__messages chat__messages-expand'\n                            : 'chat__messages'\n                    }\n                >\n                    {renderChat(user)}\n                </div>\n                <div className=\"compose\">\n                    <form\n                        className={\n                            chatDisplay\n                                ? 'message__input message__input-expand'\n                                : 'message__input'\n                        }\n                        onSubmit={handleSubmit}\n                    >\n                        <input\n                            ref={inputMessage}\n                            value={inputValue}\n                            onChange={onInputChange}\n                            onClick={!chatDisplay ? toggleShowHide : null}\n                            className=\"input\"\n                            name=\"message\"\n                            autoComplete=\"off\"\n                        />\n                        <button\n                            className={\n                                chatDisplay\n                                    ? 'send__button send__button-expand'\n                                    : 'send__button'\n                            }\n                            ref={submitButton}\n                            id=\"submit\"\n                            type=\"submit\"\n                        >\n                            <i className=\"fas fa-paper-plane\"></i>\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}