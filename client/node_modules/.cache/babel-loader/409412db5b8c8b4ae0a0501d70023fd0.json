{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatComponents/ChatBox.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Moment from 'react-moment';\nimport ChatInput from './ChatInput';\nimport socket from '../socket';\nimport UserContext from '../userContext';\n\nconst ChatBox = props => {\n  // Create a state containing the message history\n  const [messageHistory, setMessageHistory] = useState([]); // Create a state containing initial values for displaying the chatbox\n\n  const [chatDisplay, setChatDisplay] = useState(false); // Get userContext for user details\n\n  const user = useContext(UserContext); // Create a reference for the input and submit button elements\n\n  let lastMessageDummy = useRef(null); // Upon mounting, check for message received from the server and join the specified room\n\n  useEffect(() => {\n    socket.on('message', messageObject => {\n      updateMessageHistory(messageObject);\n    });\n    lastMessageDummy.scrollIntoView();\n    return () => {\n      console.log('ssdsd');\n    };\n  }); // SOCKET FUNCTIONS\n\n  function updateMessageHistory(messageObject) {\n    // Add message object containing the text, creation date, and username of sender\n    setMessageHistory([...messageHistory, messageObject]);\n  } // Use the socket emit\n\n\n  function sendMessage(message) {\n    socket.emit('newMessage', message, error => {\n      submitButton.current.removeAttribute('disabled');\n\n      if (error) {\n        alert(error);\n      }\n\n      console.log('The message was delivered');\n      inputMessage.current.value = '';\n      setInputValue('');\n      inputMessage.current.focus();\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    submitButton.current.setAttribute('disabled', 'disabled');\n    sendMessage(inputValue);\n  } // Show chat messages\n\n\n  function renderChat({\n    username\n  }) {\n    return messageHistory.map((message, index = 0) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: username.toLowerCase() === message.username ? 'message message__user' : 'message',\n        key: index++,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"message__name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }\n      }, message.username), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"message__meta\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Moment, {\n        date: message.createdAt,\n        format: \"h:mm a\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"message__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, message.text));\n    });\n  } // Toggle chat visibility\n\n\n  const toggleShowHide = () => {\n    setChatDisplay(!chatDisplay);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: chatDisplay ? 'chat__main chat__main-expand' : 'chat__main',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: chatDisplay ? 'chatdisplay__button switch right' : 'chatdisplay__button switch',\n    onClick: toggleShowHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: chatDisplay ? 'chat__messages chat__messages-expand' : 'chat__messages',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, renderChat(user), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      float: 'left',\n      clear: 'both'\n    },\n    ref: el => {\n      lastMessageDummy = el;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(ChatInput, {\n    submit: handleSubmit,\n    toggleShowHide: toggleShowHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatComponents/ChatBox.js"],"names":["React","useState","useContext","useEffect","useRef","Moment","ChatInput","socket","UserContext","ChatBox","props","messageHistory","setMessageHistory","chatDisplay","setChatDisplay","user","lastMessageDummy","on","messageObject","updateMessageHistory","scrollIntoView","console","log","sendMessage","message","emit","error","submitButton","current","removeAttribute","alert","inputMessage","value","setInputValue","focus","handleSubmit","e","preventDefault","setAttribute","inputValue","renderChat","username","map","index","toLowerCase","createdAt","text","toggleShowHide","float","clear","el"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\nimport Moment from 'react-moment';\n\nimport ChatInput from './ChatInput';\nimport socket from '../socket';\nimport UserContext from '../userContext';\n\nconst ChatBox = (props) => {\n    // Create a state containing the message history\n    const [messageHistory, setMessageHistory] = useState([]);\n    // Create a state containing initial values for displaying the chatbox\n    const [chatDisplay, setChatDisplay] = useState(false);\n\n    // Get userContext for user details\n    const user = useContext(UserContext);\n\n    // Create a reference for the input and submit button elements\n    let lastMessageDummy = useRef(null);\n\n    // Upon mounting, check for message received from the server and join the specified room\n    useEffect(() => {\n        socket.on('message', (messageObject) => {\n            updateMessageHistory(messageObject);\n        });\n        lastMessageDummy.scrollIntoView();\n        return () => {\n            console.log('ssdsd');\n        };\n    });\n\n    // SOCKET FUNCTIONS\n\n    function updateMessageHistory(messageObject) {\n        // Add message object containing the text, creation date, and username of sender\n        setMessageHistory([...messageHistory, messageObject]);\n    }\n\n    // Use the socket emit\n    function sendMessage(message) {\n        socket.emit('newMessage', message, (error) => {\n            submitButton.current.removeAttribute('disabled');\n            if (error) {\n                alert(error);\n            }\n            console.log('The message was delivered');\n            inputMessage.current.value = '';\n            setInputValue('');\n            inputMessage.current.focus();\n        });\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        submitButton.current.setAttribute('disabled', 'disabled');\n        sendMessage(inputValue);\n    }\n\n    // Show chat messages\n    function renderChat({ username }) {\n        return messageHistory.map((message, index = 0) => {\n            return (\n                <div\n                    className={\n                        username.toLowerCase() === message.username\n                            ? 'message message__user'\n                            : 'message'\n                    }\n                    key={index++}\n                >\n                    <p>\n                        <span className=\"message__name\">\n                            {message.username}\n                        </span>\n                        <span className=\"message__meta\">\n                            {\n                                <Moment\n                                    date={message.createdAt}\n                                    format=\"h:mm a\"\n                                />\n                            }\n                        </span>\n                    </p>\n                    <p className=\"message__content\">{message.text}</p>\n                </div>\n            );\n        });\n    }\n\n    // Toggle chat visibility\n    const toggleShowHide = () => {\n        setChatDisplay(!chatDisplay);\n    };\n\n    return (\n        <>\n            <div\n                className={\n                    chatDisplay ? 'chat__main chat__main-expand' : 'chat__main'\n                }\n            >\n                <div\n                    className={\n                        chatDisplay\n                            ? 'chatdisplay__button switch right'\n                            : 'chatdisplay__button switch'\n                    }\n                    onClick={toggleShowHide}\n                >\n                    <div className=\"arrow\"></div>\n                </div>\n                <div\n                    className={\n                        chatDisplay\n                            ? 'chat__messages chat__messages-expand'\n                            : 'chat__messages'\n                    }\n                >\n                    {renderChat(user)}\n                    <div\n                        style={{ float: 'left', clear: 'both' }}\n                        ref={(el) => {\n                            lastMessageDummy = el;\n                        }}\n                    ></div>\n                </div>\n                <ChatInput\n                    submit={handleSubmit}\n                    toggleShowHide={toggleShowHide}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}