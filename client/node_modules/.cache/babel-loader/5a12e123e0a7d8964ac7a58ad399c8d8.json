{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [playerMoves, setPlayerMoves] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\n  const [chosenSymbol, setChosenSymbol] = useState('');\n  useEffect(() => {\n    socket.on('gameMoves', moves => {\n      updateGameMoves(moves);\n    });\n  });\n\n  function updateGameMoves(moves) {\n    // Add message object containing the text, creation date, and username of sender\n    // Moves determine in which index should the symbol be placed\n    let newPlayerMoves = [...playerMoves];\n    newPlayerMoves[moves.index] = moves.chosenSymbol;\n    setPlayerMoves(newPlayerMoves);\n  } // SOCKET FUNCTIONS\n\n\n  function sendPlayerMove(move) {\n    socket.emit('newMove', move, error => {\n      console.log(move);\n\n      if (error) {\n        return console.log(error);\n      }\n\n      console.log('The move was delivered');\n    });\n  } // Render UI Buttons\n\n\n  function onSymbolSelect(symbol) {\n    setChosenSymbol(symbol);\n  }\n\n  function renderButtons() {\n    return playerMoves.map((content, index = 0) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: index,\n        key: index,\n        className: \"grid-item\",\n        onClick: () => {\n          sendPlayerMove({\n            index,\n            chosenSymbol\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, content));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TicTacToe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chooseButtons__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"chooseButton\",\n    onClick: () => onSymbolSelect('X'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, \"OR\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"chooseButton\",\n    onClick: () => onSymbolSelect('O'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, \"O\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gameButtons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, renderButtons())));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","playerMoves","setPlayerMoves","chosenSymbol","setChosenSymbol","on","moves","updateGameMoves","newPlayerMoves","index","sendPlayerMove","move","emit","error","console","log","onSymbolSelect","symbol","renderButtons","map","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [playerMoves, setPlayerMoves] = useState([\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' '\n    ]);\n    const [chosenSymbol, setChosenSymbol] = useState('');\n\n    useEffect(() => {\n        socket.on('gameMoves', (moves) => {\n            updateGameMoves(moves);\n        });\n    });\n\n    function updateGameMoves(moves) {\n        // Add message object containing the text, creation date, and username of sender\n        // Moves determine in which index should the symbol be placed\n        let newPlayerMoves = [...playerMoves];\n        newPlayerMoves[moves.index] = moves.chosenSymbol;\n        setPlayerMoves(newPlayerMoves);\n    }\n\n    // SOCKET FUNCTIONS\n\n    function sendPlayerMove(move) {\n        socket.emit('newMove', move, (error) => {\n            console.log(move);\n            if (error) {\n                return console.log(error);\n            }\n            console.log('The move was delivered');\n        });\n    }\n\n    // Render UI Buttons\n\n    function onSymbolSelect(symbol) {\n        setChosenSymbol(symbol);\n    }\n\n    function renderButtons() {\n        return playerMoves.map((content, index = 0) => {\n            return (\n                <div\n                    id={index}\n                    key={index}\n                    className=\"grid-item\"\n                    onClick={() => {\n                        sendPlayerMove({ index, chosenSymbol });\n                    }}\n                >\n                    <p>{content}</p>\n                </div>\n            );\n        });\n    }\n\n    return (\n        <>\n            <div className=\"TicTacToe__container\">\n                <div className=\"chooseButtons__container\">\n                    <button\n                        type=\"chooseButton\"\n                        onClick={() => onSymbolSelect('X')}\n                    >\n                        X\n                    </button>\n                    <div>OR</div>\n                    <button\n                        type=\"chooseButton\"\n                        onClick={() => onSymbolSelect('O')}\n                    >\n                        O\n                    </button>\n                </div>\n                <div className=\"gameButtons\">{renderButtons()}</div>\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}