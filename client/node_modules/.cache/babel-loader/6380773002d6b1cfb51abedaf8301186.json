{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [gameboard, setGameboard] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\n  const [matchMoves, setMatchMoves] = useState(1);\n  const [chosenSymbol, setChosenSymbol] = useState('');\n  const [playerMoves, setPlayerMoves] = useState([]);\n  const [gameState, setGameState] = useState({\n    gameOver: false,\n    winner: null\n  });\n  useEffect(() => {\n    console.log(playerMoves);\n    socket.on('gameMoves', ({\n      matchMoves,\n      move\n    }) => {\n      updateGameMoves({\n        matchMoves,\n        move\n      });\n    });\n    socket.on('gameOver', winner => {\n      setGameState({\n        gameOver: true,\n        winner\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  });\n  useEffect(() => {\n    socket.emit('checkWin', playerMoves, error => {\n      if (error) {\n        alert(error);\n      }\n\n      console.log('Player moves was delivered');\n    });\n  }, [playerMoves]); // GAME STATE FUNCTIONS\n\n  function updateGameMoves({\n    matchMoves,\n    move\n  }) {\n    // Add message object containing the text, creation date, and username of sender\n    // Moves determine in which index should the symbol be placed\n    let newPlayerMoves = [...gameboard];\n    newPlayerMoves[move.index] = move.chosenSymbol;\n    setGameboard(newPlayerMoves);\n    setMatchMoves(matchMoves);\n    addPlayerMove(move);\n  }\n\n  function onSymbolSelect(symbol) {\n    setChosenSymbol(symbol);\n  }\n\n  function addPlayerMove(move) {\n    if (move.chosenSymbol === chosenSymbol) {\n      setPlayerMoves(playerMoves => [...playerMoves, move.index]);\n    }\n  } // SOCKET FUNCTIONS\n\n\n  function sendPlayerMove(move) {\n    // If there is no placement at the gameboard then emit the move\n    // Check for winner\n    if (gameboard[move.index] === ' ') {\n      socket.emit('newMove', {\n        matchMoves,\n        move\n      }, error => {\n        if (error) {\n          alert(error);\n        }\n\n        console.log('The move was delivered');\n      });\n    } else {\n      alert(\"There's already a symbol there!\");\n    }\n  } // RENDER FUNCTIONS\n\n\n  function renderChooseButtons() {\n    if (!chosenSymbol) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('X'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, \"OR\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('O'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, \"O\"));\n    }\n  }\n\n  function renderButtons() {\n    if (chosenSymbol && !gameState.gameOver) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game__btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, gameboard.map((content, index = 0) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: index,\n          key: index,\n          className: \"grid-item\",\n          onClick: () => {\n            sendPlayerMove({\n              index,\n              chosenSymbol\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }\n        }, content));\n      }));\n    } else if (gameState.inGame) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 20\n        }\n      }, gameState.winner);\n    } else {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 20\n        }\n      }, \" Please select your symbols \");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tictactoe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"choose__btns-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, renderChooseButtons()), renderButtons()));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","gameboard","setGameboard","matchMoves","setMatchMoves","chosenSymbol","setChosenSymbol","playerMoves","setPlayerMoves","gameState","setGameState","gameOver","winner","console","log","on","move","updateGameMoves","off","emit","error","alert","newPlayerMoves","index","addPlayerMove","onSymbolSelect","symbol","sendPlayerMove","renderChooseButtons","renderButtons","map","content","inGame"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [gameboard, setGameboard] = useState([\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' '\n    ]);\n    const [matchMoves, setMatchMoves] = useState(1);\n    const [chosenSymbol, setChosenSymbol] = useState('');\n    const [playerMoves, setPlayerMoves] = useState([]);\n    const [gameState, setGameState] = useState({\n        gameOver: false,\n        winner: null\n    });\n\n    useEffect(() => {\n        console.log(playerMoves);\n        socket.on('gameMoves', ({ matchMoves, move }) => {\n            updateGameMoves({ matchMoves, move });\n        });\n\n        socket.on('gameOver', (winner) => {\n            setGameState({\n                gameOver: true,\n                winner\n            });\n        });\n\n        return () => {\n            socket.off();\n        };\n    });\n\n    useEffect(() => {\n        socket.emit('checkWin', playerMoves, (error) => {\n            if (error) {\n                alert(error);\n            }\n            console.log('Player moves was delivered');\n        });\n    }, [playerMoves]);\n    // GAME STATE FUNCTIONS\n\n    function updateGameMoves({ matchMoves, move }) {\n        // Add message object containing the text, creation date, and username of sender\n        // Moves determine in which index should the symbol be placed\n        let newPlayerMoves = [...gameboard];\n        newPlayerMoves[move.index] = move.chosenSymbol;\n        setGameboard(newPlayerMoves);\n        setMatchMoves(matchMoves);\n        addPlayerMove(move);\n    }\n\n    function onSymbolSelect(symbol) {\n        setChosenSymbol(symbol);\n    }\n\n    function addPlayerMove(move) {\n        if (move.chosenSymbol === chosenSymbol) {\n            setPlayerMoves((playerMoves) => [...playerMoves, move.index]);\n        }\n    }\n\n    // SOCKET FUNCTIONS\n\n    function sendPlayerMove(move) {\n        // If there is no placement at the gameboard then emit the move\n        // Check for winner\n        if (gameboard[move.index] === ' ') {\n            socket.emit('newMove', { matchMoves, move }, (error) => {\n                if (error) {\n                    alert(error);\n                }\n                console.log('The move was delivered');\n            });\n        } else {\n            alert(\"There's already a symbol there!\");\n        }\n    }\n\n    // RENDER FUNCTIONS\n    function renderChooseButtons() {\n        if (!chosenSymbol) {\n            return (\n                <>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('X')}\n                    >\n                        X\n                    </button>\n                    <div>OR</div>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('O')}\n                    >\n                        O\n                    </button>\n                </>\n            );\n        }\n    }\n    function renderButtons() {\n        if (chosenSymbol && !gameState.gameOver) {\n            return (\n                <div className=\"game__btns\">\n                    {gameboard.map((content, index = 0) => {\n                        return (\n                            <div\n                                id={index}\n                                key={index}\n                                className=\"grid-item\"\n                                onClick={() => {\n                                    sendPlayerMove({ index, chosenSymbol });\n                                }}\n                            >\n                                <p>{content}</p>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else if (gameState.inGame) {\n            return <h1>{gameState.winner}</h1>;\n        } else {\n            return <h1> Please select your symbols </h1>;\n        }\n    }\n\n    return (\n        <>\n            <div className=\"tictactoe__container\">\n                <div className=\"choose__btns-container\">\n                    {renderChooseButtons()}\n                </div>\n                {renderButtons()}\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}