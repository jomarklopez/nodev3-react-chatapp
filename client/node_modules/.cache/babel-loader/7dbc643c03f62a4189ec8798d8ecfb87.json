{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [playerMoves, setPlayerMoves] = useState([]);\n  useEffect(() => {\n    socket.on('gameMoves', messageObject => {\n      updateGameMoves(messageObject);\n    });\n  }); // SOCKET FUNCTIONS\n\n  function updateGameMoves(move) {\n    // Add message object containing the text, creation date, and username of sender\n    setPlayerMoves([...playerMoves, move]);\n  }\n\n  function sendPlayerMove(move) {\n    socket.emit('gameMoves', move, error => {\n      if (error) {\n        return console.log(error);\n      }\n\n      console.log('The move was delivered');\n    });\n  }\n\n  function renderButtons() {\n    const playerGrids = [];\n\n    for (let index = 1; index < 10; index++) {\n      playerGrids.push( /*#__PURE__*/React.createElement(\"div\", {\n        id: index,\n        key: index,\n        className: \"grid-item\",\n        onClick: () => {\n          sendPlayerMove(index);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, index)));\n    }\n\n    return playerGrids;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TicTacToe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }\n  }, renderButtons());\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","playerMoves","setPlayerMoves","on","messageObject","updateGameMoves","move","sendPlayerMove","emit","error","console","log","renderButtons","playerGrids","index","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB;;;;;;;;;;;;;;;;;;;;AAqBA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,MAAM,CAACI,EAAP,CAAU,WAAV,EAAwBC,aAAD,IAAmB;AACtCC,MAAAA,eAAe,CAACD,aAAD,CAAf;AACH,KAFD;AAGH,GAJQ,CAAT,CAxBoB,CA8BpB;;AAEA,WAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B;AACAJ,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBK,IAAjB,CAAD,CAAd;AACH;;AAED,WAASC,cAAT,CAAwBD,IAAxB,EAA8B;AAC1BP,IAAAA,MAAM,CAACS,IAAP,CAAY,WAAZ,EAAyBF,IAAzB,EAAgCG,KAAD,IAAW;AACtC,UAAIA,KAAJ,EAAW;AACP,eAAOC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAP;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KALD;AAMH;;AAED,WAASC,aAAT,GAAyB;AACrB,UAAMC,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,EAA5B,EAAgCA,KAAK,EAArC,EAAyC;AACrCD,MAAAA,WAAW,CAACE,IAAZ,eACI;AACI,QAAA,EAAE,EAAED,KADR;AAEI,QAAA,GAAG,EAAEA,KAFT;AAGI,QAAA,SAAS,EAAC,WAHd;AAII,QAAA,OAAO,EAAE,MAAM;AACXP,UAAAA,cAAc,CAACO,KAAD,CAAd;AACH,SANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAJ,CARJ,CADJ;AAYH;;AACD,WAAOD,WAAP;AACH;;AAED,sBAAO;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCD,aAAa,EAApD,CAAP;AACH,CAlED;;AAoEA,eAAeZ,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [playerMoves, setPlayerMoves] = useState([]);\n\n    useEffect(() => {\n        socket.on('gameMoves', (messageObject) => {\n            updateGameMoves(messageObject);\n        });\n    });\n\n    // SOCKET FUNCTIONS\n\n    function updateGameMoves(move) {\n        // Add message object containing the text, creation date, and username of sender\n        setPlayerMoves([...playerMoves, move]);\n    }\n\n    function sendPlayerMove(move) {\n        socket.emit('gameMoves', move, (error) => {\n            if (error) {\n                return console.log(error);\n            }\n            console.log('The move was delivered');\n        });\n    }\n\n    function renderButtons() {\n        const playerGrids = [];\n        for (let index = 1; index < 10; index++) {\n            playerGrids.push(\n                <div\n                    id={index}\n                    key={index}\n                    className=\"grid-item\"\n                    onClick={() => {\n                        sendPlayerMove(index);\n                    }}\n                >\n                    <p>{index}</p>\n                </div>\n            );\n        }\n        return playerGrids;\n    }\n\n    return <div className=\"TicTacToe__container\">{renderButtons()}</div>;\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}