{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [gameboard, setGameboard] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\n  const [matchMoves, setMatchMoves] = useState(1);\n  const [chosenSymbol, setChosenSymbol] = useState('');\n  const [playerMoves, setPlayerMoves] = useState([]);\n  const [gameFinish, setGameFinish] = useState({\n    inGame: false,\n    winner: null\n  });\n  useEffect(() => {\n    socket.on('gameMoves', ({\n      matchMoves,\n      move\n    }) => {\n      updateGameMoves({\n        matchMoves,\n        move\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  }); // GAME STATE FUNCTIONS\n\n  function updateGameMoves({\n    matchMoves,\n    move\n  }) {\n    // Add message object containing the text, creation date, and username of sender\n    // Moves determine in which index should the symbol be placed\n    let newPlayerMoves = [...gameboard];\n    newPlayerMoves[move.index] = move.chosenSymbol;\n    setGameboard(newPlayerMoves);\n    setMatchMoves(matchMoves);\n    addPlayerMove(move.index);\n    console.log(move.index);\n    console.log(playerMoves); // Check for winner\n\n    /* if (checkWin()) {\n        setGameFinish({\n            inGame: true,\n            winner: `${move.chosenSymbol} WINS!`\n        });\n    } */\n  }\n\n  function onSymbolSelect(symbol) {\n    setChosenSymbol(symbol);\n  }\n\n  function addPlayerMove(move) {\n    setPlayerMoves(playerMoves.concat(move));\n  }\n\n  function checkWin() {\n    const horizontalCheckPatterns = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n    const verticalCheckPatterns = [[1, 4, 7], [2, 5, 8], [3, 6, 9]];\n    const diagonalCheckPatterns = [[1, 5, 9], [3, 5, 7]]; // Iterate through possible horizontal patterns\n\n    for (let pattern of horizontalCheckPatterns) {\n      // Checks if a pattern matches with the player's moveset\n      for (let n of pattern) {\n        if (!playerMoves.includes(n)) {\n          break;\n        }\n\n        if (n === pattern[-1]) {\n          return true;\n        }\n      }\n    } // Iterate through possible vertical patterns\n\n\n    for (let pattern of verticalCheckPatterns) {\n      // Checks if a pattern matches with the player's moveset\n      for (let n of pattern) {\n        if (!playerMoves.includes(n)) {\n          break;\n        }\n\n        if (n === pattern[-1]) {\n          return true;\n        }\n      }\n    } // Iterate through possible diagonal patterns\n\n\n    for (let pattern of diagonalCheckPatterns) {\n      // Checks if a pattern matches with the player's moveset\n      for (let n of pattern) {\n        if (!playerMoves.includes(n)) {\n          break;\n        }\n\n        if (n === pattern[-1]) {\n          return true;\n        }\n      }\n    }\n  } // SOCKET FUNCTIONS\n\n\n  function sendPlayerMove(move) {\n    // If there is no placement at the gameboard then emit the move\n    if (gameboard[move.index] === ' ') {\n      socket.emit('newMove', {\n        matchMoves,\n        move\n      }, error => {\n        if (error) {\n          alert(error);\n        }\n\n        console.log('The move was delivered');\n      });\n    } else {\n      alert(\"There's already a symbol there!\");\n    }\n  } // RENDER FUNCTIONS\n\n\n  function renderChooseButtons() {\n    if (!chosenSymbol) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('X'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, \"OR\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('O'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }, \"O\"));\n    }\n  }\n\n  function renderButtons() {\n    if (chosenSymbol && !gameFinish.inGame) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game__btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, gameboard.map((content, index = 0) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: index,\n          key: index,\n          className: \"grid-item\",\n          onClick: () => {\n            sendPlayerMove({\n              index,\n              chosenSymbol\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }\n        }, content));\n      }));\n    } else if (gameFinish.inGame) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 20\n        }\n      }, gameFinish.winner);\n    } else {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 20\n        }\n      }, \" Please select your symbols \");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tictactoe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"choose__btns-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, renderChooseButtons()), renderButtons()));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","gameboard","setGameboard","matchMoves","setMatchMoves","chosenSymbol","setChosenSymbol","playerMoves","setPlayerMoves","gameFinish","setGameFinish","inGame","winner","on","move","updateGameMoves","off","newPlayerMoves","index","addPlayerMove","console","log","onSymbolSelect","symbol","concat","checkWin","horizontalCheckPatterns","verticalCheckPatterns","diagonalCheckPatterns","pattern","n","includes","sendPlayerMove","emit","error","alert","renderChooseButtons","renderButtons","map","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [gameboard, setGameboard] = useState([\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' '\n    ]);\n    const [matchMoves, setMatchMoves] = useState(1);\n    const [chosenSymbol, setChosenSymbol] = useState('');\n    const [playerMoves, setPlayerMoves] = useState([]);\n    const [gameFinish, setGameFinish] = useState({\n        inGame: false,\n        winner: null\n    });\n\n    useEffect(() => {\n        socket.on('gameMoves', ({ matchMoves, move }) => {\n            updateGameMoves({ matchMoves, move });\n        });\n        return () => {\n            socket.off();\n        };\n    });\n    // GAME STATE FUNCTIONS\n\n    function updateGameMoves({ matchMoves, move }) {\n        // Add message object containing the text, creation date, and username of sender\n        // Moves determine in which index should the symbol be placed\n        let newPlayerMoves = [...gameboard];\n        newPlayerMoves[move.index] = move.chosenSymbol;\n        setGameboard(newPlayerMoves);\n        setMatchMoves(matchMoves);\n        addPlayerMove(move.index);\n        console.log(move.index);\n        console.log(playerMoves);\n        // Check for winner\n        /* if (checkWin()) {\n            setGameFinish({\n                inGame: true,\n                winner: `${move.chosenSymbol} WINS!`\n            });\n        } */\n    }\n\n    function onSymbolSelect(symbol) {\n        setChosenSymbol(symbol);\n    }\n\n    function addPlayerMove(move) {\n        setPlayerMoves(playerMoves.concat(move));\n    }\n\n    function checkWin() {\n        const horizontalCheckPatterns = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ];\n        const verticalCheckPatterns = [\n            [1, 4, 7],\n            [2, 5, 8],\n            [3, 6, 9]\n        ];\n        const diagonalCheckPatterns = [\n            [1, 5, 9],\n            [3, 5, 7]\n        ];\n\n        // Iterate through possible horizontal patterns\n        for (let pattern of horizontalCheckPatterns) {\n            // Checks if a pattern matches with the player's moveset\n            for (let n of pattern) {\n                if (!playerMoves.includes(n)) {\n                    break;\n                }\n                if (n === pattern[-1]) {\n                    return true;\n                }\n            }\n        }\n\n        // Iterate through possible vertical patterns\n        for (let pattern of verticalCheckPatterns) {\n            // Checks if a pattern matches with the player's moveset\n            for (let n of pattern) {\n                if (!playerMoves.includes(n)) {\n                    break;\n                }\n                if (n === pattern[-1]) {\n                    return true;\n                }\n            }\n        }\n\n        // Iterate through possible diagonal patterns\n        for (let pattern of diagonalCheckPatterns) {\n            // Checks if a pattern matches with the player's moveset\n            for (let n of pattern) {\n                if (!playerMoves.includes(n)) {\n                    break;\n                }\n                if (n === pattern[-1]) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // SOCKET FUNCTIONS\n\n    function sendPlayerMove(move) {\n        // If there is no placement at the gameboard then emit the move\n        if (gameboard[move.index] === ' ') {\n            socket.emit('newMove', { matchMoves, move }, (error) => {\n                if (error) {\n                    alert(error);\n                }\n                console.log('The move was delivered');\n            });\n        } else {\n            alert(\"There's already a symbol there!\");\n        }\n    }\n\n    // RENDER FUNCTIONS\n    function renderChooseButtons() {\n        if (!chosenSymbol) {\n            return (\n                <>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('X')}\n                    >\n                        X\n                    </button>\n                    <div>OR</div>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('O')}\n                    >\n                        O\n                    </button>\n                </>\n            );\n        }\n    }\n    function renderButtons() {\n        if (chosenSymbol && !gameFinish.inGame) {\n            return (\n                <div className=\"game__btns\">\n                    {gameboard.map((content, index = 0) => {\n                        return (\n                            <div\n                                id={index}\n                                key={index}\n                                className=\"grid-item\"\n                                onClick={() => {\n                                    sendPlayerMove({ index, chosenSymbol });\n                                }}\n                            >\n                                <p>{content}</p>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else if (gameFinish.inGame) {\n            return <h1>{gameFinish.winner}</h1>;\n        } else {\n            return <h1> Please select your symbols </h1>;\n        }\n    }\n\n    return (\n        <>\n            <div className=\"tictactoe__container\">\n                <div className=\"choose__btns-container\">\n                    {renderChooseButtons()}\n                </div>\n                {renderButtons()}\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}