{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatRoomPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport socket from './socket';\nimport GameContainer from './GameContainer';\nimport ChatBox from './ChatComponents/ChatBox';\nimport userContext from './userContext';\n\nconst ChatRoomPage = props => {\n  // Create a state for determining if the user is already in a room\n  //const [inRoom, setInRoom] = useState(false);\n  // Upon mounting, join the specified room\n  useEffect(() => {\n    //  if (!inRoom) {\n    const {\n      username,\n      room\n    } = props.location.state;\n    socket.emit('joinRoom', {\n      username,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n        window.location.href = '/';\n      }\n\n      updateRoomState(true);\n    }); // }\n  });\n\n  function updateRoomState(roomstate) {\n    // Add message object containing the text, creation date, and username of sender\n    setInRoom(roomstate);\n  }\n\n  return /*#__PURE__*/React.createElement(userContext.Provider, {\n    value: props.location.state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChatBox, {\n    socket: socket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GameContainer, {\n    socket: socket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ChatRoomPage;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/ChatRoomPage.js"],"names":["React","useEffect","useState","socket","GameContainer","ChatBox","userContext","ChatRoomPage","props","username","room","location","state","emit","error","alert","window","href","updateRoomState","roomstate","setInRoom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B;AACA;AACA;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAM;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqBF,KAAK,CAACG,QAAN,CAAeC,KAA1C;AACAT,IAAAA,MAAM,CAACU,IAAP,CAAY,UAAZ,EAAwB;AAAEJ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAxB,EAA6CI,KAAD,IAAW;AACnD,UAAIA,KAAJ,EAAW;AACPC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACAE,QAAAA,MAAM,CAACL,QAAP,CAAgBM,IAAhB,GAAuB,GAAvB;AACH;;AACDC,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH,KAND,EAHY,CAUZ;AACH,GAXQ,CAAT;;AAaA,WAASA,eAAT,CAAyBC,SAAzB,EAAoC;AAChC;AACAC,IAAAA,SAAS,CAACD,SAAD,CAAT;AACH;;AAED,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEX,KAAK,CAACG,QAAN,CAAeC,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAET,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEA,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAQH,CA9BD;;AAgCA,eAAeI,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport socket from './socket';\nimport GameContainer from './GameContainer';\nimport ChatBox from './ChatComponents/ChatBox';\n\nimport userContext from './userContext';\n\nconst ChatRoomPage = (props) => {\n    // Create a state for determining if the user is already in a room\n    //const [inRoom, setInRoom] = useState(false);\n    // Upon mounting, join the specified room\n    useEffect(() => {\n        //  if (!inRoom) {\n        const { username, room } = props.location.state;\n        socket.emit('joinRoom', { username, room }, (error) => {\n            if (error) {\n                alert(error);\n                window.location.href = '/';\n            }\n            updateRoomState(true);\n        });\n        // }\n    });\n\n    function updateRoomState(roomstate) {\n        // Add message object containing the text, creation date, and username of sender\n        setInRoom(roomstate);\n    }\n\n    return (\n        <userContext.Provider value={props.location.state}>\n            <div className=\"main\">\n                <ChatBox socket={socket} />\n                <GameContainer socket={socket} />\n            </div>\n        </userContext.Provider>\n    );\n};\n\nexport default ChatRoomPage;\n"]},"metadata":{},"sourceType":"module"}