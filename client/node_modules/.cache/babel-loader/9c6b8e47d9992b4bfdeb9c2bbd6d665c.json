{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [playerMoves, setPlayerMoves] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\n  const [chosenSymbol, setChosenSymbol] = useState('');\n  useEffect(() => {\n    socket.on('gameMoves', moves => {\n      console.log(moves.length);\n      updateGameMoves(moves);\n    });\n  }); // STATE FUNCTIONS\n\n  function updateGameMoves({\n    index,\n    chosenSymbol\n  }) {\n    // Add message object containing the text, creation date, and username of sender\n    // Moves determine in which index should the symbol be placed\n    let newPlayerMoves = [...playerMoves];\n    newPlayerMoves[index] = chosenSymbol;\n    setPlayerMoves(newPlayerMoves);\n  }\n\n  function onSymbolSelect(symbol) {\n    setChosenSymbol(symbol);\n  } // SOCKET FUNCTIONS\n\n\n  function sendPlayerMove(move) {\n    if (playerMoves[move.index] === ' ') {\n      socket.emit('newMove', move, error => {\n        if (error) {\n          return console.log(error);\n        }\n\n        console.log('The move was delivered');\n      });\n    }\n  } // RENDER FUNCTIONS\n\n\n  function renderChooseButtons() {\n    if (!chosenSymbol) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('X'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, \"OR\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('O'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, \"O\"));\n    }\n  }\n\n  function renderButtons() {\n    if (chosenSymbol) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game__btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }, playerMoves.map((content, index = 0) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: index,\n          key: index,\n          className: \"grid-item\",\n          onClick: () => {\n            sendPlayerMove({\n              index,\n              chosenSymbol\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 33\n          }\n        }, content));\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 20\n        }\n      }, \" Please select your symbols \");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tictactoe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"choose__btns-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, renderChooseButtons()), renderButtons()));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","playerMoves","setPlayerMoves","chosenSymbol","setChosenSymbol","on","moves","console","log","length","updateGameMoves","index","newPlayerMoves","onSymbolSelect","symbol","sendPlayerMove","move","emit","error","renderChooseButtons","renderButtons","map","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [playerMoves, setPlayerMoves] = useState([\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' '\n    ]);\n    const [chosenSymbol, setChosenSymbol] = useState('');\n\n    useEffect(() => {\n        socket.on('gameMoves', (moves) => {\n            console.log(moves.length);\n            updateGameMoves(moves);\n        });\n    });\n    // STATE FUNCTIONS\n\n    function updateGameMoves({ index, chosenSymbol }) {\n        // Add message object containing the text, creation date, and username of sender\n        // Moves determine in which index should the symbol be placed\n        let newPlayerMoves = [...playerMoves];\n        newPlayerMoves[index] = chosenSymbol;\n        setPlayerMoves(newPlayerMoves);\n    }\n\n    function onSymbolSelect(symbol) {\n        setChosenSymbol(symbol);\n    }\n\n    // SOCKET FUNCTIONS\n\n    function sendPlayerMove(move) {\n        if (playerMoves[move.index] === ' ') {\n            socket.emit('newMove', move, (error) => {\n                if (error) {\n                    return console.log(error);\n                }\n                console.log('The move was delivered');\n            });\n        }\n    }\n\n    // RENDER FUNCTIONS\n    function renderChooseButtons() {\n        if (!chosenSymbol) {\n            return (\n                <>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('X')}\n                    >\n                        X\n                    </button>\n                    <div>OR</div>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('O')}\n                    >\n                        O\n                    </button>\n                </>\n            );\n        }\n    }\n    function renderButtons() {\n        if (chosenSymbol) {\n            return (\n                <div className=\"game__btns\">\n                    {playerMoves.map((content, index = 0) => {\n                        return (\n                            <div\n                                id={index}\n                                key={index}\n                                className=\"grid-item\"\n                                onClick={() => {\n                                    sendPlayerMove({ index, chosenSymbol });\n                                }}\n                            >\n                                <p>{content}</p>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else {\n            return <h1> Please select your symbols </h1>;\n        }\n    }\n\n    return (\n        <>\n            <div className=\"tictactoe__container\">\n                <div className=\"choose__btns-container\">\n                    {renderChooseButtons()}\n                </div>\n                {renderButtons()}\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}