{"ast":null,"code":"var _jsxFileName = \"/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js\";\nimport React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n  /**\n   * TIC TAC TOE\n   *  - Has 6 buttons\n   *  - Checks for winner every click\n   *  - Has Diagonal,Horizontal, Vertical win patterns\n   *    DIAGONAL WIN\n   *       1-5-9\n   *       3-5-7\n   *    HORIZONAL WIN\n   *       1-2-3\n   *       4-5-6\n   *       7-8-9\n   *    VERTICAL WIN\n   *       1-4-7\n   *       2-5-8\n   *       3-6-9\n   *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n   *  - Server then checks for a winner with the data sent by client\n   *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n   */\n  const [gameboard, setGameboard] = useState([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']);\n  const [matchMoves, setMatchMoves] = useState(1);\n  const [chosenSymbol, setChosenSymbol] = useState('');\n  const [playerMoves, setPlayerMoves] = useState([]);\n  const [gameFinish, setgameFinish] = useState({\n    inGame: false,\n    winner: null\n  });\n  useEffect(() => {\n    socket.on('gameMoves', ({\n      matchMoves,\n      move\n    }) => {\n      updateGameMoves({\n        matchMoves,\n        move\n      });\n    });\n  }); // GAME STATE FUNCTIONS\n\n  function updateGameMoves({\n    matchMoves,\n    move\n  }) {\n    // Add message object containing the text, creation date, and username of sender\n    // Moves determine in which index should the symbol be placed\n    let newPlayerMoves = [...gameboard];\n    newPlayerMoves[move.index] = move.chosenSymbol;\n    setGameboard(newPlayerMoves);\n    setMatchMoves(matchMoves);\n    addPlayerMove(move.index); // Check for winner\n\n    checkWin();\n  }\n\n  function onSymbolSelect(symbol) {\n    setChosenSymbol(symbol);\n  }\n\n  function addPlayerMove(move) {\n    setPlayerMoves([...playerMoves, move]);\n  }\n\n  function checkWin() {} // SOCKET FUNCTIONS\n\n\n  function sendPlayerMove(move) {\n    // If there is no placement at the gameboard then emit the move\n    if (gameboard[move.index] === ' ') {\n      socket.emit('newMove', {\n        matchMoves,\n        move\n      }, error => {\n        if (error) {\n          alert(error);\n        }\n\n        console.log('The move was delivered');\n      });\n    } else {\n      alert(\"There's already a symbol there!\");\n    }\n  } // RENDER FUNCTIONS\n\n\n  function renderChooseButtons() {\n    if (!chosenSymbol) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('X'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, \"OR\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"choose__btn\",\n        onClick: () => onSymbolSelect('O'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, \"O\"));\n    }\n  }\n\n  function renderButtons() {\n    if (chosenSymbol && !gameFinish.inGame) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game__btns\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, gameboard.map((content, index = 0) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: index,\n          key: index,\n          className: \"grid-item\",\n          onClick: () => {\n            sendPlayerMove({\n              index,\n              chosenSymbol\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }\n        }, content));\n      }));\n    } else if (gameFinish) {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }\n      }, \" Please select your symbols \");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tictactoe__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"choose__btns-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, renderChooseButtons()), renderButtons()));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/jlopez/Desktop/Development/Projects/chat-app-react-node/client/src/components/GamesComponents/TicTacToe.js"],"names":["React","useState","useEffect","socket","TicTacToe","gameboard","setGameboard","matchMoves","setMatchMoves","chosenSymbol","setChosenSymbol","playerMoves","setPlayerMoves","gameFinish","setgameFinish","inGame","winner","on","move","updateGameMoves","newPlayerMoves","index","addPlayerMove","checkWin","onSymbolSelect","symbol","sendPlayerMove","emit","error","alert","console","log","renderChooseButtons","renderButtons","map","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport socket from '../socket';\n\nconst TicTacToe = () => {\n    /**\n     * TIC TAC TOE\n     *  - Has 6 buttons\n     *  - Checks for winner every click\n     *  - Has Diagonal,Horizontal, Vertical win patterns\n     *    DIAGONAL WIN\n     *       1-5-9\n     *       3-5-7\n     *    HORIZONAL WIN\n     *       1-2-3\n     *       4-5-6\n     *       7-8-9\n     *    VERTICAL WIN\n     *       1-4-7\n     *       2-5-8\n     *       3-6-9\n     *  - Shares information on the current filled buttons or numbers in an array indicating the buttons clicked\n     *  - Server then checks for a winner with the data sent by client\n     *  - If there is a winner then send to clients via chat message the name of the winner and also send to the game state that the game is finished and there is a declared winner.\n     */\n\n    const [gameboard, setGameboard] = useState([\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' ',\n        ' '\n    ]);\n    const [matchMoves, setMatchMoves] = useState(1);\n    const [chosenSymbol, setChosenSymbol] = useState('');\n    const [playerMoves, setPlayerMoves] = useState([]);\n    const [gameFinish, setgameFinish] = useState({\n        inGame: false,\n        winner: null\n    });\n\n    useEffect(() => {\n        socket.on('gameMoves', ({ matchMoves, move }) => {\n            updateGameMoves({ matchMoves, move });\n        });\n    });\n    // GAME STATE FUNCTIONS\n\n    function updateGameMoves({ matchMoves, move }) {\n        // Add message object containing the text, creation date, and username of sender\n        // Moves determine in which index should the symbol be placed\n        let newPlayerMoves = [...gameboard];\n        newPlayerMoves[move.index] = move.chosenSymbol;\n        setGameboard(newPlayerMoves);\n        setMatchMoves(matchMoves);\n        addPlayerMove(move.index);\n        // Check for winner\n        checkWin();\n    }\n\n    function onSymbolSelect(symbol) {\n        setChosenSymbol(symbol);\n    }\n\n    function addPlayerMove(move) {\n        setPlayerMoves([...playerMoves, move]);\n    }\n\n    function checkWin() {}\n\n    // SOCKET FUNCTIONS\n\n    function sendPlayerMove(move) {\n        // If there is no placement at the gameboard then emit the move\n        if (gameboard[move.index] === ' ') {\n            socket.emit('newMove', { matchMoves, move }, (error) => {\n                if (error) {\n                    alert(error);\n                }\n                console.log('The move was delivered');\n            });\n        } else {\n            alert(\"There's already a symbol there!\");\n        }\n    }\n\n    // RENDER FUNCTIONS\n    function renderChooseButtons() {\n        if (!chosenSymbol) {\n            return (\n                <>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('X')}\n                    >\n                        X\n                    </button>\n                    <div>OR</div>\n                    <button\n                        type=\"choose__btn\"\n                        onClick={() => onSymbolSelect('O')}\n                    >\n                        O\n                    </button>\n                </>\n            );\n        }\n    }\n    function renderButtons() {\n        if (chosenSymbol && !gameFinish.inGame) {\n            return (\n                <div className=\"game__btns\">\n                    {gameboard.map((content, index = 0) => {\n                        return (\n                            <div\n                                id={index}\n                                key={index}\n                                className=\"grid-item\"\n                                onClick={() => {\n                                    sendPlayerMove({ index, chosenSymbol });\n                                }}\n                            >\n                                <p>{content}</p>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else if (gameFinish) {\n            return <h1> Please select your symbols </h1>;\n        }\n    }\n\n    return (\n        <>\n            <div className=\"tictactoe__container\">\n                <div className=\"choose__btns-container\">\n                    {renderChooseButtons()}\n                </div>\n                {renderButtons()}\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}